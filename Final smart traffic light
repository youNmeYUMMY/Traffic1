#include <LiquidCrystal.h>

int seconds_1 = 10;
int seconds_2 = seconds_1 + 10;
int seconds_3 = seconds_2 + 10;

// lane 1 ----------------------------

const int rs_1 = 1, en_1 = 2, d4_1 = 4, d5_1 = 5, d6_1 = 6, d7_1 = 7;
LiquidCrystal lcd_1(rs_1, en_1, d4_1, d5_1, d6_1, d7_1);

const int trig_1 = 10;
const int echo_1 = 11;
bool ultra_sonic_1 = true;

char state_1 = 'r';

// lane 2 ------------------------------

const int rs_2 = 14, en_2 = 30, d4_2 = 22, d5_2 = 24, d6_2 = 26, d7_2 = 28;
LiquidCrystal lcd_2(rs_2, en_2, d4_2, d5_2, d6_2, d7_2);

const int trig_2 = 12;
const int echo_2 = 13;
bool ultra_sonic_2 = true;

char state_2 = 'y';

// lane 3 ------------------------------

const int rs_3 = 16, en_3 = 40, d4_3 = 32, d5_3 = 34, d6_3 = 36, d7_3 = 38;
LiquidCrystal lcd_3(rs_3, en_3, d4_3, d5_3, d6_3, d7_3);

const int trig_3 = 8;
const int echo_3 = 9;
bool ultra_sonic_3 = true;

char state_3 = 'g';

char get_state(char c){
  if(c == 'r'){
    c = 'y';
  }
  else if(c == 'y'){
    c = 'g';
  }
  else if(c == 'g'){
    c = 'r';
  }
  return c;
}

int isVechileDetected(int pin){
    // int signal = 0;
    int signal = pulseIn(pin, HIGH);
    if(signal){
        return 1;
    }
    return 0;
}

void setup()
{
    lcd_1.begin(16, 2);
    pinMode(trig_1, OUTPUT);
    pinMode(echo_1, INPUT);

    lcd_2.begin(16, 2);
    pinMode(trig_2, OUTPUT);
    pinMode(echo_2, INPUT);

    lcd_3.begin(16, 2);
    pinMode(trig_3, OUTPUT);
    pinMode(echo_3, INPUT);
}

void loop(){

    // Lane 1 ----------------------------------------------------------------------------
    lcd_1.clear();
    lcd_1.setCursor(0, 1);
    lcd_1.print(seconds_1);

    if(state_1 == 'r' && ultra_sonic_1 == true){
        if(isVechileDetected(echo_1) > 100){
            seconds_1 = seconds_1 - 5;
            seconds_2 = seconds_2 - 5;
            seconds_3 = seconds_3 - 5;
            ultra_sonic_1 = false;
        }
    }
    
    if(state_1 == 'r'){
        lcd_1.setCursor(1, 0);
        lcd_1.print("RED");    
    }else if(state_1 == 'y'){
        lcd_1.setCursor(1, 0);
        lcd_1.print("Yellow");
    }else if(state_1 == 'g'){
        lcd_1.setCursor(1, 0);
        lcd_1.print("Green");
    }

    if(seconds_1 <= 0){
        state_1 = get_state(state_1);
        seconds_1 = 30; // (no of lanes) * base number;
        ultra_sonic_1 = true;
    }

    // Lane 2 ----------------------------------------------------------------------------
    lcd_2.clear();
    lcd_2.setCursor(0, 1);
    lcd_2.print(seconds_2);

    if(state_2 == 'r' && ultra_sonic_2 == true){
        if(isVechileDetected(echo_2) > 100){
            seconds_1 = seconds_1 - 5;
            seconds_2 = seconds_2 - 5;
            seconds_3 = seconds_3 - 5;
            ultra_sonic_2 = false;
        }
    }
    
    if(state_2 == 'r'){
        lcd_2.setCursor(1, 0);
        lcd_2.print("RED");    
    }else if(state_2 == 'y'){
        lcd_2.setCursor(1, 0);
        lcd_2.print("Yellow");
    }else if(state_2 == 'g'){
        lcd_2.setCursor(1, 0);
        lcd_2.print("Green");
    }

    if(seconds_2 <= 0){
        state_2 = get_state(state_2);
        seconds_2 = 30; // (no of lanes) * base number
        ultra_sonic_2 = true;
    }

    // Lane 3 ----------------------------------------------------------------------------
    lcd_3.clear();
    lcd_3.setCursor(0, 1);
    lcd_3.print(seconds_3);

    if(state_3 == 'r' && ultra_sonic_3 == true){
        if(isVechileDetected(echo_1) > 100){
            seconds_1 = seconds_1 - 5;
            seconds_2 = seconds_2 - 5;
            seconds_3 = seconds_3 - 5;
            ultra_sonic_3 = false;
        }
    }

    if(state_3 == 'r'){
        lcd_3.setCursor(1, 0);
        lcd_3.print("RED");    
    }else if(state_3 == 'y'){
        lcd_3.setCursor(1, 0);
        lcd_3.print("Yellow");
    }else if(state_3 == 'g'){
        lcd_3.setCursor(1, 0);
        lcd_3.print("Green");
    }

    if(seconds_3 <= 0){
        state_3 = get_state(state_1);
        seconds_3 = 30; // (no of lanes) * base number
        ultra_sonic_3 = true;
    }

    seconds_1--;
    seconds_2--;
    seconds_3--;
    delay(900);
}
